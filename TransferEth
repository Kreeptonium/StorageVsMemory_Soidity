import Web3 from "web3";
import * as dotenv from "dotenv";


const { FeeMarketEIP1559Transaction } = require( '@ethereumjs/tx' );
const Common = require( '@ethereumjs/common' ).default;
dotenv.config();


const txEth = async():Promise<any>=>{

    
    const web3 = new Web3(new Web3.providers.HttpProvider(process.env.rpcRopstenURL));
    const sendingAddress=process.env.sendAddress;
    const receiveAddress=process.env.receiveAddress;
    const privateKey = Buffer.from( process.env.PRIVATE_KEY.replace( '0x' , '' ) , 'hex' );
    var chain = new Common( { chain : 'ropsten', hardfork : 'london' } ); //Ropsten
    var txNonce = await web3.eth.getTransactionCount( sendingAddress , 'pending' );
    //@ts-ignore
    var basefees= web3.utils.toNumber((await web3.eth.getBlock('latest')).baseFeePerGas);
    console.log("basefees:",basefees);
    var maxFeesPerGas = (basefees*2)+2;
    //var maxFeesPerGas = (new BN(basefees).multipliedBy(2).plus(2));

    //2 * basefees + 2;
    //var getMaxPriorityFeesPerGas = await web3.eth
    const rawTx = {
        "to"                    :   web3.utils.toHex( receiveAddress ),
        "gasLimit"              :   web3.utils.toHex( 21000 ),
        "maxFeePerGas"          :   web3.utils.toHex( web3.utils.toWei(String(maxFeesPerGas), 'gwei' ) ),
        "maxPriorityFeePerGas"  :   web3.utils.toHex( web3.utils.toWei( '2' , 'gwei' ) ),
        "value"                 :   web3.utils.toHex( web3.utils.toWei( '0.0001' , 'ether' ) ),
       // "data"                  :   web3.utils.toHex( 'TESTING TODAY' ),
        "nonce"                 :   web3.utils.toHex( txNonce ),
        "chainId"               :   "0x03", //0x03
        //"accessList"            :   [],
        "type"                  :   "0x02"
    };

    const tx = FeeMarketEIP1559Transaction.fromTxData( rawTx , { chain } );

    const signedTransaction = tx.sign( privateKey );

    const serializedTransaction = '0x' + signedTransaction.serialize().toString( 'hex' );

    var sendingAddressBalance = await web3.eth.getBalance( sendingAddress );

    console.log( "Balance: " + sendingAddressBalance );

    const txHash = await web3.utils.sha3( serializedTransaction );
    console.log( "Tx Hash: " + txHash );

    await web3.eth.sendSignedTransaction( serializedTransaction )
    .on( 'error' , function( error ) {
        console.error( error )
    })
	.on('confirmation', async (confirmationNumber: number, receipt) => { 
            console.log(confirmationNumber);
            console.log(receipt)
;
	})
	.on('receipt', async (txReceipt) => {
		console.log("signAndSendTx txReceipt. Tx Address: " + txReceipt.transactionHash);
	})



}
txEth().then((resolve)=>console.log("Script Complete")).catch((error)=>{
    console.log("Error",error);
    process.exitCode=1;
})
